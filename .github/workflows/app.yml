name: Build, Test, Push Docker Image, and Deploy to Minikube (EC2)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: python -m unittest discover

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-python-app:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-python-app:latest

  deploy-to-minikube:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_MINIKUBE_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Minikube (on EC2)
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_MINIKUBE_IP }} << 'EOF'
            echo "Deploying to Minikube on EC2..."

            # Pull latest Docker image from Docker Hub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-python-app:latest

            # Apply Kubernetes Deployment
            kubectl delete deployment my-python-app --ignore-not-found=true
            kubectl create deployment my-python-app --image=${{ secrets.DOCKERHUB_USERNAME }}/my-python-app:latest
            
            # Expose the application if not already exposed
            kubectl expose deployment my-python-app --type=NodePort --port=5000 || true

            # Verify deployment
            kubectl get pods -o wide
            kubectl get services
          EOF
